#!/usr/bin/env ruby
# Copyright 2011, Dell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


require File.join(File.expand_path(File.dirname(__FILE__)), "barclamp_lib")
@barclamp = "user"


@commands["user_list"] = [ "user_list()", "user_list - Show a list of current users" ]
@commands["user_show"] = [ "user_show(ARGV.shift)", "user_show <id_or_username> - Show a specific user" ]
@commands["user_create"] = [ "user_create(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift)", "user_create <username> <email> <password> <password_confirmation> <remember_me> <is_admin> - Create a user" ]
@commands["user_update"] = [ "user_update(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift)", "user_update <id_or_username> <username> <email> <remember_me> <is_admin> - Update a user" ]
@commands["user_delete"] = [ "user_delete(ARGV.shift)", "user_delete <id_or_username> - Delete a user" ]
@commands["user_make_admin"] = [ "user_make_admin(ARGV.shift)", "user_make_admin <id_or_username> - Make user admin" ]
@commands["user_remove_admin"] = [ "user_remove_admin(ARGV.shift)", "user_remove_admin <id_or_username> - Remove user admin privilege" ]
@commands["user_lock"] = [ "user_lock(ARGV.shift)", "user_lock <id_or_username> - Lock user account" ]
@commands["user_unlock"] = [ "user_unlock(ARGV.shift)", "user_unlock <id_or_username> - Unlock user account" ]
@commands["user_reset_password"] = [ "user_reset_password(ARGV.shift,ARGV.shift,ARGV.shift)", "user_reset_password <id_or_username> <password> <password_confirmation> - Change user password" ]


def user_list()
  struct = get_json2("2.0/crowbar/2.0/users")
  if struct[1] != 200
    [ "Failed to talk to service user list: #{struct[1]}: #{struct[0]}", 1 ]
  elsif struct[0].nil? or struct[0].empty?
    [ "No current users", 0 ]
  else
    [ JSON.pretty_generate(struct[0]), 0]
  end
end

def user_show(id_or_username)
  usage -1 if id_or_username.nil? or id_or_username == ""

  struct = get_json2("2.0/crowbar/2.0/users/#{id_or_username}")

  if struct[1] == 200
    [ "#{JSON.pretty_generate(struct[0])}", 0 ]
  elsif struct[1] == 404
    [ struct[0], 1 ]
  else
    [ "Unable to retrieve user #{id_or_username}: #{struct[1]} - #{struct[0]}", 1 ]
  end
end

def user_create(username,email,password,password_confirmation,remember_me,is_admin)
  usage -1 if username.nil? or username == ""
  usage -1 if email.nil? or email == ""
  usage -1 if password.nil? or password == ""
  usage -1 if password_confirmation.nil? or password_confirmation == ""
  usage -1 if remember_me.nil? or remember_me == ""
  usage -1 if is_admin.nil? or is_admin == ""
  
  remember_me = (remember_me.nil?) ? false : remember_me
  is_admin = (is_admin.nil?) ? false : is_admin
 
  @data = {
      "username" => username,
      "email" => email,
      "password" => password,
      "password_confirmation" => password_confirmation,
      "remember_me" => remember_me,
      "is_admin" => is_admin
    }.to_json
  struct = post_json2("2.0/crowbar/2.0/users", @data)

  if struct[1] == 200
    [ "Created user #{username}", 0 ]
  elsif struct[1] == 400
    [ "Failed to create user: #{username} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while creating the user: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def user_update(id_or_username, username, email, remember_me, is_admin)
  usage -1 if id_or_username.nil? or id_or_username == ""
  usage -1 if username.nil? or username == ""
  usage -1 if email.nil? or email == ""
  usage -1 if remember_me.nil? or remember_me == ""
  usage -1 if is_admin.nil? or is_admin == ""
  
  @data = {
      "username" => username,
      "email" => email, 
      "remember_me" => remember_me,
      "is_admin" => is_admin
    }.to_json

  struct = put_json2("2.0/crowbar/2.0/users/#{id_or_username}", @data)
  
  if struct[1] == 200
    [ "Updated user: #{id_or_username}", 0 ]
  elsif struct[1] == 404
    [ "Failed to update user: #{id_or_username} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to update user: #{id_or_username} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while updating the user: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def user_delete(id_or_username)
  usage -1 if id_or_username.nil? or id_or_username == ""

  struct = delete_json2("2.0/crowbar/2.0/users/#{id_or_username}")

  if struct[1] == 200
    [ "Deleted user #{id_or_username}", 0 ]
  elsif struct[1] == 404
    [ struct[0], 1 ]
  else
    [ "Failed to delete user:#{id_or_username} : #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def user_make_admin(id_or_username)
  user_update_admin(id_or_username, true)
end

def user_remove_admin(id_or_username)
  user_update_admin(id_or_username, false)
end

def user_update_admin(id_or_username, onOff=false)
  usage -1 if id_or_username.nil? or id_or_username == ""

  command = (onOff) ? "user_make_admin" : "user_remove_admin"
  struct = get_json2("2.0/crowbar/2.0/#{command}/#{id_or_username}")
 
  if struct[1] == 200
    [ "Set is_admin attribute for user #{id_or_username}", 0 ]
  elsif struct[1] == 404
    [ "Failed to set is_admin attribute for the user: #{id_or_username} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to set is_admin attribute for the user: #{id_or_username} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while setting is_admin attribute for the user: #{struct[1]}: #{struct[0]}", 1 ]
  end
end


def user_lock(id_or_username)
  user_lock_unlock(id_or_username, true)
end

def user_unlock(id_or_username)
  user_lock_unlock(id_or_username, false)
end

def user_lock_unlock(id_or_username, lockUnlock=false)
  usage -1 if id_or_username.nil? or id_or_username == ""

  command = (lockUnlock) ? "user_lock" : "user_unlock"
  struct = put_json2("2.0/crowbar/2.0/#{command}/#{id_or_username}")
  if struct[1] == 200
    [ "Locked/Unlocked the user: #{id_or_username}", 0 ]
  elsif struct[1] == 404
    [ "Failed to lock/unlock the user: #{id_or_username} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to lock/unlock the user: #{id_or_username} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while attempting to lock/unlock the user: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def user_reset_password(id_or_username, password, password_confirmation)
  usage -1 if id_or_username.nil? or id_or_username == ""
  usage -1 if password.nil? or password == ""
  usage -1 if password_confirmation.nil? or password_confirmation == ""

  @data = {
      "password" => password,
      "password_confirmation" => password_confirmation,
      }.to_json

  struct = put_json2("2.0/crowbar/2.0/user_reset_password/#{id_or_username}", @data)
  
  if struct[1] == 200
    [ "Reset password for user: #{id_or_username}", 0 ]
  elsif struct[1] == 404
    [ "Failed to reset password for user: #{id_or_username} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to reset password for user: #{id_or_username} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while attempting to reset password for user: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

main
