-if request.env['HTTP_USER_AGENT'].downcase =~ /msie ([1-8])/
  %p
    %em= t('.msie_fail')
  = render :partial => 'barclamp/edit_deployment_raw'
  -if RAILS_ENV === "development"
    %p
      = "DEBUG HTTP USER AGENT: #{request.env['HTTP_USER_AGENT']}"
-else 
  %input#proposal_development{:type => "hidden", :name => "proposal_deployment", :value => @proposal.raw_data['deployment'][@proposal.barclamp].to_json }
  %h3= t('.title')
  = link_to t('raw'), proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => true, :attr_raw => @attr_raw), :style => "float:right;"
  %div.container#deploy
    %p
      %em#hint= t('.hint')
    .column_40.first
      %div#nodes_div
        %table#node_tbl
          %thead
            %tr
              %th
                #nodes_title= link_to( t('barclamp.proposal_show.available_nodes'), dashboard_path) + image_tag('/images/icons/magnifier.png', options= { :style=>"float:right", :title=>t('.filter')})
          %tbody
            - nodes_hash().sort_by{ |k, v| v[:alias]}.each do |n, detail|
              %tr
                %td
                  %a.available{:href => 'javascript:void(0);', :class =>"draggable_a", :admin=>(detail[:admin] ? "true" : "false"),  :id =>n, :title =>(detail[:title] || t('not_set')), :draggable=>'true'  }= detail[:alias]
                  = link_to image_tag('/images/icons/link.png'), nodes_path(:selected => detail[:handle]), :title=>detail[:alias], :style=>"float:right"
    .column_50.last
      - @proposal.all_elements.each do |element|
        %div
          %div.droptarget{ :id=>element, :draggable=>'true'}
            - if CONVERGED_ADMIN
              %b= link_to element.humanize, "http://#{request.host}:4040/roles/#{element}", :target => '_blank'
            - else
              %b= element.humanize
            %img{ :src=>'/images/icons/server_add.png', :title=>t('.add') }
          %ul.ddlist{ :id=>element }

.clear

:javascript
  
$(document).ready(function() {
  var oTable = $('#node_tbl').dataTable({"sScrollY": 99999,"bScrollCollapse": true,"bPaginate": false, "LengthChange": false, "bFilter": true, "bSort": false, "bInfo": false, "bAutoWidth": false,
                  "oLanguage":{"sSearch":""}});
  var even_row = true;
  $("#nodes_title").append($("#node_tbl_filter"));
  
  DragDropHelpers.fixVisualCues=true;
  var messages = {};
    messages['no_dup'] = "#{t('.no_dup')}";
    messages['added'] = "#{t('.added')}";
    messages['removed'] = "#{t('.removed')}";
    messages['error'] = "#{t('.error')}";
    messages['constraint_max']=  "#{t('.constraint_max')}";
    messages['constraint_unique']=  "#{t('.constraint_unique')}";
    messages['constraint_admin']=  "#{t('.constraint_admin')}";
  var json = "";
  json = (document.getElementById('proposal_development')) ? JSON.parse(document.getElementById('proposal_development').value) : json;
  var limis;
  var allocated = [];
  try {
    limits = constraints;
  } catch(err) {
    //no rescue needed
  }

  // this populates the current deployment from the given data
  $('#deploy div.droptarget[draggable="true"]').each(function() {
    var element = $(this).attr('id');
    if (json['elements'][element]) {
      $.each(json['elements'][element], function(index, node) {
        make_allocated(node, element);
      });
    }
  });
  
  // set draggable attributes
  $('#deploy a.available[draggable="true"]')
    .bind('dragend', function( ev ) {
      false;
    })
    .bind('dragstart', function( ev ) {
      // console.debug("dragging " + ev.target.id);
      var dt = ev.originalEvent.dataTransfer;
      // TODO make sure only a available set this!
      dt.setData("Text", ev.target.id);
    });

  // set droppable attributes
  $('#deploy div.droptarget[draggable="true"]')
    // Decide whether the thing dragged in is welcome.
    .bind('dragover', function(ev) {
        if (ev.preventDefault) ev.preventDefault(); // allows us to drop
        return false;
    })

    // Handle the final drop...
    .bind('drop', function(ev) {
      if (ev.preventDefault) ev.preventDefault(); // allows us to drop
      var node = ev.originalEvent.dataTransfer.getData("Text");      
      if (node) {
        var list = $(this).attr('id');
        if ($('ul.ddlist[id="'+list+'"]').children('a[id="'+node+'"]').length==0) {
          drop_item(node, list);
          return true;
        } else {
          i18n_msg('no_dup', node, list, 'duplicate name not allowed'); 
          return false;
        }
      } else {
        i18n_msg("error", 'missing', list, 'drag and drop error, no node in dataTransfer.getDate'); 
        return false;
      }
    });

  // called when an available node is dropped into the list
  function drop_item(name, list) {
    var $node = $('li.allocated[id="'+name+'"]');
    if ($node) {
      // block admin from being used
      if (limits[list].admin==undefined || !limits[list].admin) {
        if ($('a.available[id="'+name+'"]').attr("admin")=="true") {
          i18n_msg("constraint_admin",name, list, "cannot be admin");
          return false;
        }
      }
      // test uniqueness from other lists
      if (limits[list].unique)  {
        allocated = $.unique(allocated);
        if (allocated.indexOf(name)!=-1) {
          i18n_msg("constraint_unique",name,list,"must be unique");
          return false;
        }
      } 
      // test count
      switch (limits[list].count) {
        case null:
        case -1:
          // no limits!
          break;
        case 0: 
          i18n_msg(error, name, list, "Constraint count limit = 0");
          return false;
          break;
        default:
          if (($('ul.ddlist[id="'+list+'"]').children().length>=limits[list].count)) {
            i18n_msg("constraint_max",name, list, "too many");
            return false;
          }
      }
      if (make_allocated(name, list)) {
        if (json['elements'][list] == undefined) {
          json['elements'][list] = new Array();
        }
        json['elements'][list].push(name);
        update_json();
        i18n_msg("added", name, list, 'success');
        return true;
      }
    }
    return false;
  }
  
  // substitutions for i18n strings
  function i18n_msg(id, node, list, error) {
    msg = messages[id];
    if (node) {
      shortname = node.split('.')[0];
      msg = msg.replace('[0]', shortname);
    }
    if (list) msg = msg.replace('[1]', list);
    if (error) msg = msg.replace('[2]', error);
    $('#hint').text(msg).effect("highlight", {color: '#666666'}, 250);
  }
  
  // responds to the remove button
  function remove_item(name, list) {
    var nodes = json['elements'][list];
    var idx = jQuery.inArray(name, nodes);  // Find the index
    if (idx!=-1) nodes.splice(idx, 1);    // Remove it!
    json['elements'][list] = nodes;       // update the corrected list
    update_json();
    $('ul.ddlist[id="'+list+'"]').children('li[id="'+name+'"]').remove();
    var a_idx = allocated.indexOf(name);
    if (a_idx!=-1) allocated.splice(a_idx, 1)
    i18n_msg("removed", name, list, "success");
  }
  
  // call after updates to change the values
  function update_json() {
    input = document.getElementById('proposal_development')
    if(input){
      input.value = JSON.stringify(json);
      // console.debug("json:" + document.getElementById('proposal_development').value);
    }
  }
  
  // creates the LI HTML and adds it to the list
  function make_allocated(item, list) {
    try {
      var $list = $('ul.ddlist[id="'+list+'"]');
      if ($list.children('li[id="'+item+'"]').length == 0) {
        var node = $('a.available[id="'+item+'"]', $('#nodes_div'));
        var title = node.attr('title');
        var shortname = node.text();
        var ll = "<li class='allocated " + (even_row ? 'even' : 'odd') +"' id='"+ item + "' title='"+ title + "'>"+shortname;
        ll = ll + "<img src='/images/icons/server_delete.png' style='float:right' title='#{t('.remove')}' onclick='remove_item(\""+item+"\",\""+list+"\");'>";
        ll = ll + "</li>";
        $list.append(ll);
        allocated.push(item);
        even_row = !even_row;
        //console.debug("make li " + shortname + " for " + $list.attr('id') + "(children-" + $list.children().length + ") li=" + ll);
        return true;
      } else {
        i18n_msg('no_dup', item, list, 'duplicate name not allowed'); 
      }
    } catch(err) {
      i18n_msg('error', item, list, err); 
    }
    return false;
  }
  
  // this is needed for legacy support because the old methods pass in contraints to node_selector
  function node_selector(base, constraints)
  {
    limits = constraints;
  }
};
