- prop = "#{@proposal.barclamp}_#{@proposal.name}"
- barclamp = @proposal.barclamp
- role_name = @proposal.name
- catalog = ServiceObject.barclamp_catalog
- display_name = catalog['barclamps'][barclamp]['display']
- display_name = barclamp.titlecase if display_name.nil? or display_name == ""

%h2.page-header
  .led.div-center.unknown{:id => prop, :title=>t('proposal.status.unknown'), :style=>'float:left'}
  = t '.title'
  .pull-right.control-text
    = link_to t('cancel'), barclamp_modules_path(:id=>@proposal.barclamp), :class => 'btn'
.page-header-bottom
-# Rails 2 needs - and Rails 3 needs =
- form_for :proposal, :url => update_proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp), :html => { :method => :post, :'data-type' => 'html', :id => 'update_proposal_form', :class => "box1", :autocomplete => "off" } do |f|
  .pull-right
    - if @proposal["deployment"][@proposal.barclamp]["crowbar-committing"].nil? or !@proposal["deployment"][@proposal.barclamp]["crowbar-committing"]
      - if @active
        %input.btn{:type => "submit", :name => "submit", :value => t('.destroy_active'), :'data-confirm' => t('.destroy_changes')}
      - unless @active or @proposal["deployment"][@proposal.barclamp]["crowbar-queued"]
        %input.btn{:type => "submit", :name => "submit", :value => t('.delete_proposal'), :'data-confirm' => t('.delete_changes')}
      - if @proposal["deployment"][@proposal.barclamp]["crowbar-queued"]
        %input.btn{:type => "submit", :name=>"submit", :source=> "dequeue1", :match=>'dequeue2', :value => t('.dequeue_proposal'), :'data-remote'=>'true'}
      %input.btn{:type => "submit", :name=>"submit", :source => "commit1", :match=>'commit2', :value => t('.commit_proposal'), :'data-remote'=>'true', :'data-confirm' => t('.apply_changes')}
      %input.btn{:type => "submit", :name => "submit", :source=>"save1", :match=>"save2", :value => t('.save_proposal'), :'data-remote'=>"true"}
  - if @service_object.simple_proposal_ui? && !Kernel.const_get("#{barclamp.camelize}Service").method(:allow_multiple_proposals?).call
    %h2= link_to "#{display_name}", barclamp_modules_path(:id=>@proposal.barclamp)
  - else
    %h2= link_to "#{display_name}: #{@proposal.name.titlecase}", barclamp_modules_path(:id=>@proposal.barclamp)

  %input#barclamp{:type => "hidden", :name => "barclamp", :value => @proposal.barclamp}
  %input#name{:type => "hidden", :name => "name", :value => @proposal.name}
  = render_attributes(@attr_raw, @proposal)
  = render :partial => "barclamp/attribute_helper"

  = render_deployment(@dep_raw, @proposal)
  .row
    .pull-right
      - if @proposal["deployment"][@proposal.barclamp]["crowbar-committing"].nil? or !@proposal["deployment"][@proposal.barclamp]["crowbar-committing"]
        - if @active
          %input.btn{:type => "submit", :name => "submit", :value => t('.destroy_active'), :'data-confirm' => t('.destroy_changes')}
        - unless @active or @proposal["deployment"][@proposal.barclamp]["crowbar-queued"]
          %input.btn{:type => "submit", :name => "submit", :value => t('.delete_proposal'), :'data-confirm' => t('.delete_changes')}
        - if @proposal["deployment"][@proposal.barclamp]["crowbar-queued"]
          %input.btn{:type => "submit", :name=>"submit", :source=> "dequeue2", :match=>'dequeue1', :value => t('.dequeue_proposal'), :'data-remote'=>'true'}
        %input.btn{:type => "submit", :name=>"submit", :source => "commit2", :match=>'commit1', :value => t('.commit_proposal'), :'data-remote'=>'true', :'data-confirm' => t('.apply_changes')}
        %input.btn{:type => "submit", :name=>"submit", :source => "save2", :match=>'save1', :value => t('.save_proposal'), :'data-remote'=>'true'}


:javascript

  function update() {
    $.ajaxSetup({ timeout: 3000 })
    $.getJSON('#{status_proposals_barclamp_path(:id=>prop, :barclamp=>barclamp, :name=>role_name)}', function(data) {
      // Update proposals status
      $.each(data['proposals'], function(key,val) {
        var el = $('#'+key);
        if(el.hasClass("unknown")) {
          led_update(el, key, val, data['i18n'][key]['status']);
        } else {
          led_update(el, key, val, data['i18n'][key]['status'], function(){ el.effect("highlight", {color: '#eeeeee'}, 2000); });
        }
      });
    });
  }

  function led_update(td, key, val, i18n, callback) {
    if(!td.hasClass(val)){
      td.attr('class', val+' div-center led').attr('title', i18n);
      if(typeof callback == 'function'){
        callback.call();
      }
    };
  }

  jQuery(document).ready(function($) {
    update();
  });
