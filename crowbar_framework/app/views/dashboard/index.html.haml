%p#add_button{:style => 'float:right'}
  = text_field_tag "new_group", t('.default_new'), :size => 15
  = link_to t('.add'), "javascript:add_group();", :class => 'button', :id=>'add_button'
%h1= t('.title')

.column_100
  - unless false
    %section.box#details
      - if params.include? :nopoll
        = t '.no_polling'
      - if @node
        = render :partial => 'show'
      - else
        %p= t(".status_empty") % Node.count
        %div{ :class=>'group', :draggable=>'true', :id=>Group.find_or_create_by_name_and_category('not_set', 'ui').id }
          =t('.drag_hint').html_safe

#nodes
  - if @groups.nil?
    = t 'no_items'
  - else
    - i = -1
    #add_group_div.column_25{:class => cb_column_class(1,4), :style=>'display:none' }
      %table.data.box{:id => "new_group_add"}
        %thead
          %tr
            %th.status
              %a{:href=>"javascript:hide_group();", :title=>t('.hide')}
                %img{:src=>"/images/icons/server_add.png"}
            %th{ :id=> 'new_group', :droptarget=>'true' }
              = "THIS TEXT GETS REPLACED"
        %tbody
          %tr
            %td 
            %td= t('.new_drag')
    - @groups.sort.each do |group|
      - next if group.name.eql? 'not_set' and group.nodes.count == 0
      .column_25{:class => cb_column_class(i+=1,4)}
        %table.data.box{:id => "group_#{group.id}"}
          %thead
            %tr
              - if group.nodes.count == 0
                %th.status{:title => t('.remove_group')}
                  %img{ :src=>'/images/icons/delete.png', :title=>t('.remove_group'), :onclick=>"javascript:remove_group(#{group.id});" }
              - else
                %th.status{:title => t('updating')}
                  .inline_piechart= [0, 0, 1, 0, 0]*','
              %th.group{:title=>group.description}
                - unless group[:automatic]
                  %div{ :class=>'group', :draggable=>'true', :id=>group.id }
                    = truncate(group.name, :length => 25)
                - else
                  %div{ :class=>'group', :draggable=>'true', :id=>'USE_AUTOMATIC!' }
                    %i= truncate(group.name, :length => 25)
  
          %tbody
            - group.nodes.each do |node|
              %tr{ :class => ["node", cycle(:odd, :even, :name => "nodes_#{i}")], :id => node.id }
                %td.status{:raw=> node.state }
                  .led{:class => node.status, :title=>t(node.status, :scope=>'status', :default=>node.status)} 
                %td.name
                  %a{:href => node_path(node.id), :draggable=>'true', :title=> (node.description.nil? ? t(:not_set) : node.description), :class => 'node_details', :id => node.id}
                    = truncate(node.alias, :length => 25)
  
.clear

:javascript
  groups = {};
  selected = '#{session[:node]}';
  
  function pie_title(total, ready, failed, unknown, unready, pending, building) {
    var status = "#{t :status_pie, :scope=>'dashboard.index'}";
    status = status.replace("{0}", total);
    status = status.replace("{1}", ready);
    status = status.replace("{2}", failed);
    status = status.replace("{3}", unknown);
    status = status.replace("{4}", unready+pending+building);
    return status;
  }
  
    // set draggable attributes
  $('a.node_details[draggable="true"]')
    .bind('dragend', function( ev ) {
      false;
    })
    .bind('dragstart', function( ev ) {
      // console.debug("dragging " + ev.target.id);
      var dt = ev.originalEvent.dataTransfer;
      // TODO make sure only a available set this!
      dt.setData("Text", ev.target.id);
    });

  // set droppable attributes using bind_drop
  $('div.group[draggable="true"]').each(function() { bind_drop($(this))} );

    
  function bind_drop(div) {
    // Decide whether the thing dragged in is welcome.
    div.bind('dragover', function(ev) {
        if (ev.preventDefault) ev.preventDefault(); // allows us to drop
        return false;
    });

    // Handle the final drop...
    div.bind('drop', function(ev) {
      if (ev.preventDefault) ev.preventDefault(); // allows us to drop
      var node = ev.originalEvent.dataTransfer.getData("Text");
      var group = $(this).attr('id');
      // console.debug(node + ' into ' + group );
      $.ajax({url:'/2.0/crowbar/2.0/group/'+group+'/node/'+node, dataType:'json', type:"PUT", 
        statusCode: { 200: function(data) { location.href = '#{dashboard_path}/'+selected; }}
      });
    });
  }
  
  function hide_group() {
    $('#add_group_div').attr('style','display:none');
  }
  
  function remove_group(id) {
    $.ajax({url:'/2.0/crowbar/2.0/group/'+id, type:"DELETE", dataType: 'json',
      statusCode: { 200: function(data) { $('#group_'+id).remove(); } }
    });
  }
  
  function add_group() {
    var group_div = $('#add_group_div');
    var new_group = $('#new_group').val();
    var group = $('th[droptarget="true"]');
    var valid_group_regex = /^[a-zA-Z][a-zA-Z0-9._-]+$/;
    if (new_group.match(valid_group_regex)) {
      // Create the group json and post it
      var group_data = {'name': new_group, 'description': new_group, 'category': 'ui'}
      $.ajax({url:"/2.0/crowbar/2.0/group", data:group_data, type:'POST', dataType:'json', 
        success:function(data) {
          // on success, add to the UI
          var id = data['id']
          group.attr('id', id);
          group.text(new_group);
          bind_drop($('#'+id.toString()));
          group_div.attr('style', 'display:inline');
          $('a#add_button').attr('class','button');}, 
        error:function(data) { 
          alert("#{t '.add_group_exists'}"); $('a#add_button').attr('class','button'); }
      })} 
    else {
      alert("#{t '.add_group_error'}");
      $('a#add_button').attr('class','button');
    }
  }
  
  function update() {
    // use nopoll parameter for debugging to prevent activity on web server
    // TODO: restore this:
    if (#{params.include?(:nopoll) ? 'false' : 'true'}) {
      $.ajaxSetup({ timeout: 3000 })
      $.getJSON('#{nodes_status_path()}', function(data) {
        
        // reload path
        var repath = '#{dashboard_path}/'+selected;
        
        // If node count has changed, re-render the page
        var current_nodes = $('.node').length;
        if(data['count'] != current_nodes) {
          location.href = repath;
        }
  
        // If node name sum has changed, re-render the page
        if(data['sum'] != #{@sum}) {
          location.href = repath;
        }
        
        // Update group-level piecharts
        $.each(data['groups'], function(key,val) {
          k = key.toString();
          var values = val['ready'] + ', ' + val['failed'] + ', ' + val['unknown'] + ', ' + (val['building']+val['unready']+val['pending']);
          var total = val['ready']+val['unready']+val['unknown']+val['building']+val['pending']+val['failed'];
          if (groups[k]==undefined) { 
            groups[k] = total; 
          } else if (groups[k]!=total) {
            location.href =repath;
          }
          $('#group_'+k+' th.status .inline_piechart').html(values).sparkline('html', piechart_options );
          $('#group_'+k+' th.status').attr('title', pie_title(total, val['ready'], val['failed'], val['unknown'], val['building'], val['unready'], val['pending']));
        });
        
        // Update nodes
        $.each(data['status'], function(key,val) {
          k = key.toString();
          var td = $('#'+k+' td.status');
          var led = td.children('.led');
          if(!(td.attr('raw') === val['raw'])) {
            led.destroy();
            led.attr('class', 'led '+val['status']);
            td.attr('raw', val['raw']);
            td.effect("highlight", {color: '#666666'}, 2000);
            led.attr('title', val['state']);
          }
          // catch the case where we've expanded detail on a node
          s = $('div.container dd.node_state');
          h_key = "head_"+k;
          h = $('div.container div.led[id="'+h_key+'"]');
          if (h.attr('id')==h_key && s.text()!=val['state']) {
            s.text(val['state']);
            s.effect("highlight", {color: '#666666'}, 2000);
            s.attr('title','#{t('raw')}: '+val['raw']);
            var head = $('#head_'+k);
            if (head.length !=0 ) {
              head.destroy();
              head.attr('class', 'led '+val['status']);
              head.attr('title', val['state']);
            }
          }
        });
      });
    }
  }
