%h2.page-header
  = t('.title')
  %form.form-inline.pull-right
    = text_field_tag 'new_group', nil, :placeholder => t('.default_new'), :size => 15
    = link_to t('.add'), "javascript:add_group();", :class => 'btn', :id=>'add_button'
.page-header-bottom
%small.small-header= t(:status_empty, :scope => 'nodes.index', :count => @nodes.count)
.row
  - unless @nodes.empty?
    .span12#details
      - if @node
        = render :partial => 'show'
      - else
        %br
        %div{ :droptarget=>'true' , :id=>'USE_AUTOMATIC!' }
          =t '.drag_hint'

.row#nodes
  - if @nodes.nil?
    = t('no_items')
  - else
    - i = -1
    #add_group_div.span3{:style=>'display:none' }
      %table.table.table-bordered{:id => "new_group_add"}
        %thead
          %tr
            %th.status
              %a{:href=>"javascript:hide_group();", :title=>t('.hide')}
                %img{:src=>"/images/icons/server_delete.png"}
            %th{ :id=> 'new_group_th', :droptarget=>'true' }
              = "THIS TEXT GETS REPLACED"
        %tbody
          %tr
            %td{:colspan => "2"}= t('.new_drag')
    - @groups.sort.each do |name, group|
      .span3
        %table.table.table-bordered{:id => "group_#{(name || t('unknown')).parameterize}"}
          %thead
            %tr
              %th.status{:title => t('updating')}
                .inline_piechart= [group[:status]["ready"], group[:status]["failed"], group[:status]["unknown"], group[:status]["unready"]+group[:status]["pending"]] * ","
              %th{ :droptarget=>"true", :id=>(group[:automatic] ? 'USE_AUTOMATIC!' : name)  }
                %div{ :class=>'group'}
                  - unless group[:automatic]
                    = truncate(name || t('unknown'), :length => 25)
                  - else
                    %i= truncate(name || t('unknown'), :length => 25)
                    
          %tbody
            - group[:nodes].sort.each do |order, handle|
              - node = @nodes[handle]
              %tr{ :class => ["node", cycle(:odd, :even, :name => "nodes_#{i}")], :id => handle }
                %td.status{:raw=> node[:state] }
                  .led.pull-right{:class => node[:status], :title=>t("state.#{node[:status]}", :default=>node[:status].titlecase)} 
                %td.name
                  %a{:href => node_path(handle), :draggable=>'true', :title=> (node[:description] || t('model.attributes.node.description_not_set')), :class => 'node_details', :id => handle.parameterize}
                    = truncate(node[:alias], :length => 25)

.clear

:javascript
  groups = {};
  selected = '#{session[:node]}';
  
  function pie_title(total, ready, failed, unknown, unready, pending, building) {
    var status = "#{t :status_pie, :scope=>'nodes.index'}";
    status = status.replace("{0}", total);
    status = status.replace("{1}", ready);
    status = status.replace("{2}", failed);
    status = status.replace("{3}", unknown);
    status = status.replace("{4}", unready+pending+building);
    return status;
  }
  
    // set draggable attributes
  $('a.node_details[draggable="true"]')
    .bind('dragend', function( ev ) {
      false;
    })
    .bind('dragstart', function( ev ) {
      // console.debug("dragging " + ev.target.id);
      var dt = ev.originalEvent.dataTransfer;
      // TODO make sure only a available set this!
      dt.setData("Text", ev.target.id);
    });

  // set droppable attributes using bind_drop
  $('*[droptarget="true"]').each(function() { bind_drop($(this))} );

    
  function bind_drop(div) {
    // Decide whether the thing dragged in is welcome.
    div.bind('dragover', function(ev) {
        if (ev.preventDefault) ev.preventDefault(); // allows us to drop
        return false;
    });

    // Handle the final drop...
    div.bind('drop', function(ev) {
      if (ev.preventDefault) ev.preventDefault(); // allows us to drop
      var node = ev.originalEvent.dataTransfer.getData("Text");
      var group = $(this).attr('id');
      // console.debug(node + ' into ' + group );
      
      url='/nodes/groups/1.0/'+node
      
      if (group==='USE_AUTOMATIC!'){
        url += '/NONE?automatic=true';
      } else {
        url += '/'+group;
      }
      
      $.post(url,
        function(data){
          location.href = '#{dashboard_path}/'+selected;
        }
      );
      $(this).animate({"opacity":"0"}, 5000);
    });
  }
  
  function hide_group() {
  // console.debug("foo"); 
    $('#add_group_div').attr('style','display:none');
  }
  
  function add_group() {
    var group_div = $('#add_group_div');
    var new_group = $('#new_group').val();
    var group = $('#new_group_th');
    var valid_group_regex = /^[a-zA-Z][a-zA-Z0-9._:-]+$/;
    if (new_group.match(valid_group_regex)) {
      group.attr('id', new_group);
      group.text(new_group);
      bind_drop($('#'+new_group));
      group_div.attr('style', 'display:inline');
      $('a#add_button').attr('class','btn');
    } 
    else {
      alert("#{t '.add_group_error'}");
      $('a#add_button').attr('class','btn');
    }
  }

  function update() {
    $.ajaxSetup({ timeout: 3000 })
    $.getJSON('#{nodes_status_path}', function(data) {
      
      // reload path
      var repath = '#{dashboard_path}/'+selected;
      
      // If node count has changed, re-render the page
      var current_nodes = $('.node').length;
      if(data['count'] != current_nodes) {
        location.href = repath;
      }

      // If node name sum has changed, re-render the page
      if(data['sum'] != #{@sum}) {
        location.href = repath;
      }
      
      // Update group-level piecharts
      $.each(data['groups'], function(key,val) {
        var values = val['ready'] + ', ' + val['failed'] + ', ' + val['unknown'] + ', ' + (val['building']+val['unready']+val['pending']);
        var total = val['ready']+val['unready']+val['unknown']+val['building']+val['pending']+val['failed'];
        if (groups[key]==undefined) { 
          groups[key] = total; 
        } else if (groups[key]!=total) {
          location.href =repath;
        }
        $('#group_'+key.toLowerCase()+' th.status .inline_piechart').html(values).sparkline('html', piechart_options );
        $('#group_'+key.toLowerCase()+' th.status').attr('title', pie_title(total, val['ready'], val['failed'], val['unknown'], val['building'], val['unready'], val['pending']));
      });
      
      // Update nodes
      $.each(data['nodes'], function(key,val) {
        var td = $('#'+key+' td.status');
        var led = td.children('.led');
        if(!(td.attr('raw') === val['raw'])) {
          led.destroy();
          led.attr('class', 'led pull-right '+val['status']);
          td.attr('raw', val['raw']);
          td.effect("highlight", {color: '#eeeeee'}, 2000);
          led.attr('title', val['state']);
        }
        // catch the case where we've expanded detail on a node
        s = $('div dd.node_state');
        h_key = "head_"+key;
        h = $('div div.led[id="'+h_key+'"]');
        if (h.attr('id')==h_key && s.text()!=val['state']) {
          s.text(val['state']);
          s.effect("highlight", {color: '#eeeeee'}, 2000);
          s.attr('title','#{t('raw')}: '+val['raw']);
          var head = $('#head_'+key);
          if (head.length !=0 ) {
            head.destroy();
            head.attr('class', 'led '+val['status']);
            head.attr('title', val['state']);
          }
        }
      });
      
    });
  }
