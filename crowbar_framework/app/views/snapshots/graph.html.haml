= javascript_include_tag 'infovis/jit'
= javascript_include_tag 'infovis/jit-yc'  #this may not be needed, please review

%h1= t '.title', :snapshot=>@snapshot.name

%div#infovis
  %div#infovis-canvaswidget
    %canvas#infovis-canvas

%div.tip#_tooltip{:style=>"position: absolute; z-index: 13000; top: 320px; left: 421px; display: none;"}

.clear

:javascript

$(document).ready(function() {

  var labelType = 'HTML';
  var useGradients = true; 
  var nativeTextSupport = false;
  var animate = true;

    // init ForceDirected
    var fd = new $jit.ForceDirected({
      //id of the visualization container
      injectInto: 'infovis',
      //Enable zooming and panning
      //by scrolling and DnD
      Navigation: {
        enable: true,
        //Enable panning events only if we're dragging the empty
        //canvas (and not a node).
        panning: 'avoid nodes',
        zooming: 10 //zoom speed. higher is more sensible
      },
      // Change node and edge styles such as
      // color and width.
      // These properties are also set per node
      // with dollar prefixed data-properties in the
      // JSON structure.
      Node: {
        overridable: true
      },
      Edge: {
        overridable: true,
        color: '#23A4FF',
        lineWidth: 0.4
      },
      //Native canvas text styling
      Label: {
        type: labelType, //Native or HTML
        size: 10,
        style: 'bold'
      },
      //Add Tips
      Tips: {
        enable: true,
        onShow: function(tip, node) {
          //count connections
          var count = 0;
          node.eachAdjacency(function() { count++; });
          //display node info in tooltip
          tip.innerHTML = "<div class=\"tip-title\">" + node.name + "</div>"
            + "<div class=\"tip-text\"><b>connections:</b> " + count + "</div>";
        }
      },
      // Add node events
      Events: {
        enable: true,
        type: 'Native',
        //Change cursor style when hovering a node
        onMouseEnter: function() {
          fd.canvas.getElement().style.cursor = 'move';
        },
        onMouseLeave: function() {
          fd.canvas.getElement().style.cursor = '';
        },
        //Update node positions when dragged
        onDragMove: function(node, eventInfo, e) {
            var pos = eventInfo.getPos();
            node.pos.setc(pos.x, pos.y);
            fd.plot();
        },
        //Implement the same handler for touchscreens
        onTouchMove: function(node, eventInfo, e) {
          $jit.util.event.stop(e); //stop default touchmove event
          this.onDragMove(node, eventInfo, e);
        },
        //Add also a click handler to nodes
        onClick: function(node) {
          if(!node) return;
          // put stuff here
        }
      },
      //Number of iterations for the FD algorithm
      iterations: 200,
      //Edge length
      levelDistance: 130,
      // Add text to the labels. This method is only triggered
      // on label creation and only for DOM labels (not native canvas ones).
      onCreateLabel: function(domElement, node){
        domElement.innerHTML = node.name;
        var style = domElement.style;
        style.fontSize = "0.8em";
        style.color = "#ddd";
      },
      // Change node styles when DOM labels are placed
      // or moved.
      onPlaceLabel: function(domElement, node){
        var style = domElement.style;
        var left = parseInt(style.left);
        var top = parseInt(style.top);
        var w = domElement.offsetWidth;
        style.left = (left - w / 2) + 'px';
        style.top = (top + 10) + 'px';
        style.display = '';
      }
    });

    // load JSON data.
    var json = null;     
    $.ajax( 
    { 
        async: false, 
        global: false, 
        url: "/api/v2/snapshots/#{@snapshot.id}/graph",
        dataType: 'json', 
        success: function(data) 
        { 
            json = data; 
        } 
    }); 

    console.debug(json);
    fd.loadJSON(json);

    // compute positions incrementally and animate.
    fd.computeIncremental({
      iter: 40,
      property: 'end',
      onStep: function(perc){
        console.debug(perc + '% loaded...');
      },
      onComplete: function(){
        console.debug('done');
        fd.animate({
          modes: ['linear'],
          transition: $jit.Trans.Elastic.easeOut,
          duration: 2500
        });
      }
    });
    // end

};